"""
Deskripsi:
Skrip ini adalah versi 2.0.10 dari Summary Report Automated Checker, yang dibuat oleh I Putu Ferry Wistika.
Skrip ini digunakan untuk memproses file berformat .tar.xz yang berisi file .txt, mengklasifikasikan data dalam file tersebut
ke dalam tiga kategori: 'OK', 'Null', dan 'Anomaly' berdasarkan pola tertentu. Versi ini tidak menyimpan file log individual,
tetapi hanya menyimpan ringkasan dari setiap file dalam satu file summary_all.txt di folder Output_Checker.

Setiap file .tar.xz yang diproses akan menghasilkan ringkasan yang disimpan dalam file summary_all.txt di folder Output_Checker.
Ringkasan ini berisi informasi mengenai jumlah baris dengan status 'OK', 'Null', dan 'Anomaly' dari semua file yang diproses.
Skrip ini memastikan bahwa data yang telah diproses tetap tersimpan meskipun skrip dihentikan sebelum selesai.

Cara penggunaan:
1. Jalankan skrip ini dengan argumen berupa path ke folder yang berisi file .tar.xz.
2. Skrip akan mengklasifikasikan isian file .txt dalam .tar.xz dan menyimpan ringkasan hasil klasifikasi dalam summary_all.txt di folder Output_Checker.

Usage: python3 file.py folder_path
"""

hello = """Summary Report Automated Checker
Generated by: I Putu Ferry Wistika
Version 2.0.10
Last updated: 2024-09-02
----------------------------------------
"""

import tarfile
import pandas as pd
import re
import os
import sys

class TarXZProcessor:
    def __init__(self, folder_path):
        self.folder_path = folder_path
        self.summary_content = []
        self.output_folder = os.path.join(os.getcwd(), "Output_Checker_V2")
        
        # Buat folder Output_Checker jika belum ada
        if not os.path.exists(self.output_folder):
            os.makedirs(self.output_folder)

        # Tentukan path file summary_all.txt
        self.summary_file_path = os.path.join(self.output_folder, "summary_all.txt")
        
        # Simpan summary awal jika sudah ada
        if os.path.exists(self.summary_file_path):
            with open(self.summary_file_path, "r") as summary_file:
                self.summary_content = summary_file.read().splitlines()

    def classify_line(self, line):
        # OK pattern with exactly 4 fields
        if re.match(r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3},\d+(\.\d+)?(,\d+(\.\d+)?){1}$", line):
            return 'OK'
        # Null pattern with missing values
        elif re.match(r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3},$", line):
            return 'Null'
        # Anything else is considered an anomaly
        else:
            return 'Anomaly'

    def process_file(self, file_path, file_name):
        null_count = 0
        anomaly_count = 0
        ok_count = 0

        with tarfile.open(file_path, "r:xz") as tar:
            for member in tar.getmembers():
                if member.isfile() and member.name.endswith(".txt"):
                    f = tar.extractfile(member)
                    data = f.read().decode('utf-8').splitlines()

                    for line in data:
                        status = self.classify_line(line)

                        # Update counts
                        if status == 'OK':
                            ok_count += 1
                        elif status == 'Null':
                            null_count += 1
                        elif status == 'Anomaly':
                            anomaly_count += 1

                        # Print the log to terminal
                        print(f"[{line}] : {status} :")

        # Prepare summary for the individual file
        summary = f"Summary for {file_name}:\nOK Count: {ok_count}\nNull Count: {null_count}\nAnomaly Count: {anomaly_count}\n"
        
        # Print the summary to the terminal
        print(summary)
        
        # Store summary for the summary file
        self.summary_content.append(summary)

    def process_folder(self):
        # Process each .tar.xz file in the given folder
        for file_name in os.listdir(self.folder_path):
            if file_name.endswith(".tar.xz"):
                file_path = os.path.join(self.folder_path, file_name)
                self.process_file(file_path, file_name)
        
        # Write the summary content to summary_all.txt
        with open(self.summary_file_path, "w") as summary_file:
            summary_file.write("\n".join(self.summary_content))
        
        print(hello)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(hello)
        print("Usage: python3 file.py folder_path")
        sys.exit(1)

    folder_path = sys.argv[1]
    processor = TarXZProcessor(folder_path)
    processor.process_folder()
