"""
Deskripsi:
Skrip ini memproses file .tar.xz yang berisi file .txt dengan mengklasifikasikan baris data
menjadi kategori 'OK', 'Null', atau 'Anomaly'. Hasil dari setiap file .tar.xz hanya dirangkum
dalam file ringkasan tanpa menyimpan log rinci per file individu. Ringkasan disimpan dalam
folder Output_Checker, yang selalu diperbarui setiap kali skrip dijalankan.
"""

hello = """Summary Report Automated Checker
Generated by: I Putu Ferry Wistika
Version 2.0.10
Last updated: 2024-09-02
----------------------------------------
"""

import tarfile
import pandas as pd
import re
import os
import sys

class TarXZProcessor:
    def __init__(self, folder_path):
        self.folder_path = folder_path
        self.summary_content = []
        self.output_folder = "Output_Checker_V2"
        os.makedirs(self.output_folder, exist_ok=True)
        self.summary_file_path = os.path.join(self.output_folder, "summary_all.txt")

        # Write initial header to the summary file
        header_info = """Summary Report Automated Checker
Generated by: I Putu Ferry Wistika
Version 2.0.10
Last updated: 2024-09-02
----------------------------------------
"""
        if not os.path.isfile(self.summary_file_path):
            with open(self.summary_file_path, "w") as summary_file:
                summary_file.write(header_info)

    def classify_line(self, line):
        # OK pattern with exactly 4 fields
        if re.match(r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3},\d+(\.\d+)?(,\d+(\.\d+)?){1}$", line):
            return 'OK'
        # Null pattern with missing values
        elif re.match(r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3},$", line):
            return 'Null'
        # Anything else is considered an anomaly
        else:
            return 'Anomaly'

    def process_file(self, file_path, file_name):
        null_count = 0
        anomaly_count = 0
        ok_count = 0

        with tarfile.open(file_path, "r:xz") as tar:
            for member in tar.getmembers():
                if member.isfile() and member.name.endswith(".txt"):
                    f = tar.extractfile(member)
                    data = f.read().decode('utf-8').splitlines()

                    extracted_data = []
                    line_status = []

                    for line in data:
                        status = self.classify_line(line)
                        columns = line.split(',')

                        if len(columns) == 4:
                            extracted_data.append(columns)
                        elif len(columns) < 4:
                            columns.extend([None] * (4 - len(columns)))
                            extracted_data.append(columns)
                            status = 'Null'
                        else:
                            status = 'Anomaly'
                            extracted_data.append(columns[:4])  # Only take the first 4 columns

                        line_status.append(f"{line} -> {status}")
                        print(f"[{line}] : {status} :")

                        # Update counts
                        if status == 'OK':
                            ok_count += 1
                        elif status == 'Null':
                            null_count += 1
                        elif status == 'Anomaly':
                            anomaly_count += 1

        # Prepare summary for the individual file
        summary = f"Summary for {file_name}:\nOK Count: {ok_count}\nNull Count: {null_count}\nAnomaly Count: {anomaly_count}\n"
        
        # Print the summary to the terminal
        print(summary)
        
        # Store summary for the summary file
        self.summary_content.append(summary)

        # Update summary file after processing each file
        with open(self.summary_file_path, "a") as summary_file:
            summary_file.write(summary)

    def process_folder(self):
        for file_name in os.listdir(self.folder_path):
            if file_name.endswith(".tar.xz"):
                file_path = os.path.join(self.folder_path, file_name)
                self.process_file(file_path, file_name)

        print(hello)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(hello)
        print("Usage: python3 version_2_file.py folder_path")
        sys.exit(1)

    folder_path = sys.argv[1]
    processor = TarXZProcessor(folder_path)
    processor.process_folder()
